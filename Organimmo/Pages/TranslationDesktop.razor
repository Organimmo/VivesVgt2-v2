
@using MudBlazor
@using Organimmo.DAL
@using Organimmo.SDK.Contract
@using Organimmo.Services.Model

@inject ISnackbar SnackBar
@inject HttpClient Http
@inject ILocalStorageService localStorage
@inject IStringLocalizer<Resource> localizer
@*
@inject ITranslateAPI _translateApi
*@

<MudPaper Class="d-flex justify-content-center">
    <MudImage Src="images/Organimo logo.png" Alt="" Elevation="25" Style="width:250px; height:75px;"/>
</MudPaper>
<MudPaper Class="col">
    <label> Choose Filter:</label>
    <select id="@MyItems" style="border:2px  solid black">
        <option value="BaseText">BaseText</option>
        <option value="CurrentText">CurrentText</option>
    </select>

</MudPaper>


<MudTable Items="@MyItems" CanCancelEdit="true" SortLabel="Sort By" FixedHeader="true" Filter="new Func<Item,bool>(FilterFunc1)">
    <ToolBarContent>
        <MudTextField Class="m-2" @bind-Value="_searchString" Style="border:2px solid darkgray" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh Class="fw-bold pa-3 mr-14"><MudTableSortLabel SortBy="new Func<Item, object>(x => x.Type)">Type</MudTableSortLabel></MudTh>
        <MudTh Class="fw-bold pa-3 mr-14"><MudTableSortLabel Enabled="true" SortBy="new Func<Item, object>(x => x.BaseText)">@localizer["defaulttranslation"] </MudTableSortLabel></MudTh>
        <MudTh Class="fw-bold pa-3 mr-14"><MudTableSortLabel Enabled="true" SortBy="new Func<Item, object>(x => x.CurrentText)">@localizer["currenttranslation"] </MudTableSortLabel></MudTh>

        </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Type">@context.Type</MudTd>
        <MudTd DataLabel="DefaultTranslation">@context.BaseText</MudTd>
        <MudTd DataLabel="CurrentTranslation">
            @if (IsEditing)
            {
                <MudPaper Elevation="0" Class="d-flex">
                    <MudTextField @bind-Value="@context.CurrentText" Variant="Variant.Outlined" Required @onclick="Submit"/>
                    <MudIconButton Icon="@Icons.Filled.Check" OnClick="SaveTranslation"/>
                </MudPaper>
            }
            else{
                <MudPaper Elevation="0" Class="d-flex align-items-center">
                    <MudIconButton Class="mr-2" Icon="@Icons.Filled.Edit" OnClick="Edit" Size="Size.Small"/>
                    <MudText Typo="Typo.body2">@context.CurrentText</MudText>
                </MudPaper>

            }
        </MudTd>

    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<button class="saveBtn" @onclick="SaveTranslation"><img src="/images/Save.png" width="300" height="75" /></button>

@code
{
    private Item selectedItem = null;
    private ItemDto ItemDto { get; set; }
    private RootDto? data { get; set; } = new();
    private string jsonFile="sample-data/data.json";
    private bool IsEditing { get; set; }
    private bool FilterFunc1(Item translation) => FilterFunc(translation, _searchString);
    private string _searchString = "";
    private BlazorValidationSummary _validation;
    private List<Item> MyItems { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        await localStorage.SetItemAsync("JsonFile", jsonFile);
      
     
        data = await Http.GetFromJsonAsync<RootDto>(jsonFile);

        var window = data.Window;

        foreach(var item in window)
        {

            MyItems = item.Items;
        }

        foreach(var translation in MyItems)
        {
            Item item = new Item
            { 
                Type = "Action",
                Name = "Name",
                BaseText = translation.BaseText,
                CurrentText = translation.CurrentText,
            };
        }
    }


    private bool FilterFunc(Item translation, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (translation.Type.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (translation.BaseText.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (translation.CurrentText.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void Submit()
    {
        //TO Do...

        /*var result = await ...(add api-call here);

        if (!result.Succeeded)
            {
            _validation.AddValidationError(result.Errors);

        SnackBar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        SnackBar.Add("Suggestion couldn't be saved", Severity.Error,
            config => { config.Icon = config.ErrorIcon; });
            return;
        }*/

        SnackBar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        SnackBar.Add("Suggested translation was successfully saved!", Severity.Success,
            config => { config.Icon = config.Icon=Icons.Filled.ThumbUpAlt; });

    }

    private void Edit()
    {
        IsEditing = !IsEditing;
    }

    private async Task SaveTranslation()
    {
    //to do.. here you have to add the method to save the suggested word
        /*
        await _translateApi.CreateTranslation(ItemDto);
        */

            SnackBar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            SnackBar.Add("Thank you for your suggestions!", Severity.Success,
                config => { config.Icon = config.SuccessIcon; });

    }


}